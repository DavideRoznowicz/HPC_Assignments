mean(data[data$couples=="couple counselling" & data$sex=="man",]$bupacts)
mean(data[data$couples=="couple counselling" & data$sex=="woman",]$bupacts)
bup_w=data[data$couples=="couple counselling" & data$sex=="woman",]$bupacts
bup_m=data[data$couples=="couple counselling" & data$sex=="man",]$bupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(test_w$fupacts-bup_w, test_m$fupacts-bup_m, xlab="women fupacts", ylab="men fupacts", main="models")
abline(0,0, col="red")
plot(bup_w-test_w$fupacts, bup_w-test_w$fupacts, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
mean(data[data$couples=="couple counselling" & data$sex=="man",]$fupacts)
mean(data[data$couples=="couple counselling" & data$sex=="woman",]$fupacts)
mean(data[data$couples=="couple counselling" & data$sex=="man",]$bupacts)
mean(data[data$couples=="couple counselling" & data$sex=="woman",]$bupacts)
bup_w=data[data$couples=="couple counselling" & data$sex=="woman",]$bupacts
bup_m=data[data$couples=="couple counselling" & data$sex=="man",]$bupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(test_w$fupacts-bup_w, test_m$fupacts-bup_m, xlab="women fupacts", ylab="men fupacts", main="models")
abline(0,0, col="red")
plot(test_w-bup_w$fupacts, test_w-bup_w$fupacts, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=data[data$couples=="couple counselling" & data$sex=="woman",]$bupacts
bup_m=data[data$couples=="couple counselling" & data$sex=="man",]$bupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(test_w$fupacts-bup_w, test_m$fupacts-bup_m, xlab="women fupacts", ylab="men fupacts", main="models")
abline(0,0, col="red")
plot(test_w-bup_w$fupacts, test_w-bup_w$fupacts, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(test_w$fupacts-bup_w, test_m$fupacts-bup_m, xlab="women fupacts", ylab="men fupacts", main="models")
abline(0,0, col="red")
plot(test_w$fupacts-bup_w, test_w$fupacts-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
# selecting women's response within the couple
test_w=data[data$couples=="couple counselling" & data$sex=="woman",]
# selecting men's response within the couple
test_m=data[data$couples=="couple counselling" & data$sex=="man",]
fup_w=test_w$fupacts
fup_m=test_m$fupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w, fup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
# draw a 45 degree line
abline(0,1, col="red")
plot(fup_w, fup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
# fitting a negative binomial on for women
mod_w=glm.nb(formula=fupacts~bs_hiv+log(bupacts+1),data=test_w)
# fitting a negative binomial for men
mod_m=glm.nb(formula=fupacts~bs_hiv+log(bupacts+1),data=test_m)
par(mfrow=c(1,2))
# plot of predicted values for fupacts for both models (both sexes)
plot(mod_w$fitted.values, mod_m$fitted.values, xlab="women fitted values", ylab="men fitted values", main="models")
# draw a 45 degree line
abline(0,1, col="red")
plot(mod_w$fitted.values, mod_w$fitted.values, xlab="women fitted values", ylab="men fitted values", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="models")
abline(0,0, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m-bup_m)
mean(fup_w-bup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m-bup_m)
mean(fup_w-bup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean((fup_m-bup_m)/fup_m)
mean(fup_w-bup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m-bup_m)/mean(fup_m)
mean(fup_w-bup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m-bup_m)/mean(fup_m)
mean(fup_w-bup_w)/mean(fup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m-bup_m)/mean(bup_m)
mean(fup_w-bup_w)/mean(bup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m-bup_m)
mean(fup_w-bup_w)
mean(fup_m)
mean(fup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, xlab="women fupacts", ylab="men fupacts", main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, xlab="women fupacts", ylab="men fupacts", main="expected trend", sub="men and women give SAME response")
fup_m-bup_m
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m-bup_m)
mean(fup_w-bup_w)
mean(fup_m)
mean(fup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, main="expected trend", sub="men and women give SAME response")
fup_m-bup_m
fup_w-bup_w
getwd()
bup_w=test_w$bupacts
bup_m=test_m$bupacts
mean(fup_m)
mean(fup_w)
mean(fup_m-bup_m)
mean(fup_w-bup_w)
par(mfrow=c(1,2))
# plot of fupacts for men against fupacts for women
plot(fup_w-bup_w, fup_m-bup_m, main="fupacts")
abline(0,1, col="red")
plot(fup_w-bup_w, fup_w-bup_w, main="expected trend", sub="men and women give SAME response")
q <- seq(1:5)
q
v <- seq(2:6)
v
v <- seq(2:1:6)
v <- seq(2:6)
v
v[1:3]
ls
setwd("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/final_results")
knitr::opts_chunk$set(echo = TRUE)
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ww_mpi_k11$P, ww_mpi_k11$avg, main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,6))
plot(ww_mpi_k101$P, ww_mpi_k101$avg, main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,246))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,15))
plot(ww_mpi_k11$P, ww_mpi_k11$avg, main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,6))
plot(ww_mpi_k101$P, ww_mpi_k101$avg, main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,246))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,15))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,15))
plot(ww_mpi_k11$P, ww_mpi_k11$avg, main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,6))
plot(ww_mpi_k101$P, ww_mpi_k101$avg, main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,246))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,15))
plot(ww_mpi_k11$P, ww_mpi_k11$avg, main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,6))
plot(ww_mpi_k101$P, ww_mpi_k101$avg, main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,246))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o"
plot(ww_mpi_k11$P, ww_mpi_k11$avg, main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,6))
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ww_mpi_k11$P, ww_mpi_k11$avg, main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,6))
plot(ww_mpi_k101$P, ww_mpi_k101$avg, main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,246))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,6))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,246))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o")
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,25))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o")
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o"ylim=c(0,24))
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o",ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o")
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
