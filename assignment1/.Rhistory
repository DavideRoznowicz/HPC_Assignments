plot(x,dbinom(x, n, 0.9),type="h",
xlab="x",ylab="f(x)",ylim = c(0,.35),
main ="Bin(n=20, p=0.9)")
## 3. compare the plots varying the value of the parameter lambda----------------------------
par(mfrow=c(1,3))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
plot(x, poisson(x,lambda=2), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 2")))
plot(x, poisson(x,lambda=3.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 3.5")))
## 3. compare the plots varying the value of the parameter lambda----------------------------
dev.off()
par(mfrow=c(1,3))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
plot(x, poisson(x,lambda=2), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 2")))
plot(x, poisson(x,lambda=3.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 3.5")))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
par(mfrow=c(1,3))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
?poisson
?dpoisson
par(mfrow=c(1,3))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
##########################
## Poisson distribution ##
##########################
## 1. write a function to compute the probabilities of a Poisson r.v.------------------------
poisson <- function(x,lambda){
lambda^x*exp(-lambda)/factorial(x)
}
## 2. plot the p.m.f. for X~Pois(2)----------------------------------------------------------
x <- c(0:10)
par(mfrow=c(1,3))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
plot(x, poisson(x,lambda=2), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 2")))
plot(x, poisson(x,lambda=3.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 3.5")))
par(mfrow=c(2,1))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
plot(x, poisson(x,lambda=2), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 2")))
par(mfrow=c(1,2))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
plot(x, poisson(x,lambda=2), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 2")))
plot(x, poisson(x,lambda=3.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 3.5")))
par(mfrow=c(1,3))
plot(x, poisson(x,lambda=0.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 0.5")))
plot(x, poisson(x,lambda=2), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 2")))
plot(x, poisson(x,lambda=3.5), type="h", xlab="x", ylab="f(x)",
main=expression(paste("Poisson: ", lambda, " = 3.5")))
#########################
## Normal distribution ##
#########################
##B1.------------------------------------------------------------------------------------------
# plot (on a single plot) the density functions of:
# -a standard normal distribution
# -a normal distribution with mean 0 and std.dev 1.5
# -a normal distribution with mean 0 and variance 4------------------------------------------------------------
par(mfrow=c(1,1))
x <- seq(-6, 10, length = 100)
x
plot(x, dnorm(x), type="l", xlab="x", ylab= "f(x)")
curve(dnorm(x, mean=1, sd=1.5), add=TRUE, lty=2, col=2)
points(x, dnorm(x, mean=3, sd=2), type="l", col=3)
?points
?curve
#########################
## Normal distribution ##
#########################
##B1.------------------------------------------------------------------------------------------
# plot (on a single plot) the density functions of:
# -a standard normal distribution
# -a normal distribution with mean 0 and std.dev 1.5
# -a normal distribution with mean 0 and variance 4------------------------------------------------------------
par(mfrow=c(1,1))
x <- seq(-6, 10, length = 100)
x
plot(x, dnorm(x), type="l", xlab="x", ylab= "f(x)")
curve(dnorm(x, mean=1, sd=1.5), add=TRUE, lty=1, col=2)
points(x, dnorm(x, mean=3, sd=2), type="l", col=3)
curve(dnorm(x, mean=1, sd=1.5), add=TRUE, lty=3, col=2)
points(x, dnorm(x, mean=3, sd=2), type="l", col=3)
#########################
## Normal distribution ##
#########################
##B1.------------------------------------------------------------------------------------------
# plot (on a single plot) the density functions of:
# -a standard normal distribution
# -a normal distribution with mean 0 and std.dev 1.5
# -a normal distribution with mean 0 and variance 4------------------------------------------------------------
par(mfrow=c(1,1))
x <- seq(-6, 10, length = 100)
x
plot(x, dnorm(x), type="l", xlab="x", ylab= "f(x)")
curve(dnorm(x, mean=1, sd=1.5), add=TRUE, lty=3, col=2)
points(x, dnorm(x, mean=3, sd=2), type="l", col=3)
#########################
## Normal distribution ##
#########################
##B1.------------------------------------------------------------------------------------------
# plot (on a single plot) the density functions of:
# -a standard normal distribution
# -a normal distribution with mean 0 and std.dev 1.5
# -a normal distribution with mean 0 and variance 4------------------------------------------------------------
par(mfrow=c(1,1))
x <- seq(-6, 10, length = 100)
x
plot(x, dnorm(x), type="l", xlab="x", ylab= "f(x)")
curve(dnorm(x, mean=1, sd=1.5), add=TRUE, lty=2, col=2)
points(x, dnorm(x, mean=3, sd=2), type="l", col=3)
gg <- 4
gg
?dnorm
x <- pnorm(10^5)
hist(x)
?dnorm
x <- rnorm(10^5)
hist(x)
?hist
hist(x, breaks=100)
hist(x, breaks=10)
hist(x, breaks=100)
xx <- seq(min(x), max(x), l=100)
lines(xx, dnorm(xx))
lines(xx, dnorm(xx))
dev.off()
lines(xx, dnorm(xx))
x <- rnorm(10^5) ### simulate values from N(0,1)
xx <- seq(min(x), max(x), l = 1000)
hist.scott(x, main = "") ### from MASS package
lines(xx, dnorm(xx), col = "red", lwd = 2)
library("MASS")
x <- rnorm(10^5) ### simulate values from N(0,1)
xx <- seq(min(x), max(x), l = 1000)
hist.scott(x, main = "") ### from MASS package
lines(xx, dnorm(xx), col = "red", lwd = 2)
u <- pnorm(x)
hist.scott(u, prob=TRUE)
segments(0,1,1,1)
segments(0,1,1,1, col=2)
?pnorm
?pnorm
xx <- seq(-10, 10)
xx
?seq
xx <- seq(-10, 10, 100)
xx
xx <- seq(-10, 10, by=100)
xx
xx <- seq(-10, 10)
xx
xx <- seq(-10, 10, 0.1)
xx
plot(xx, pnorm(xx))
xx <- seq(-4, 4, 0.1)
plot(xx, pnorm(xx))
x <- rnorm(10^5) ### simulate values from N(0,1)
xx <- seq(min(x), max(x), l = 1000)
hist.scott(x, main = "") ### from MASS package
lines(xx, dnorm(xx), col = "red", lwd = 2)
x
pnorm(x)
hist(pnorm(x))
xx <- seq(-4, 4, 0.1)
hist(pnorm(xx))
hist(pnorm(x))
plot(xx, pnorm(x))
plot(xx, pnorm(xx))
u <- runif(30)
u
?runif
?runif(min=0, max=50)
runif(min=0, max=50)
runif(30, min=0, max=50)
?qnorm
#
Q3  <- qnorm(0.75, mu, sigma)
Q1  <- qnorm(0.25, mu, sigma)
IQR <- Q3-Q1
IQR
Q1
mu    <- 70
sigma <- 5
#
pnorm(90, mu, sigma)
#or P(X<=90)=Phi((90-mu)/sigma)
z <- (90-mu)/sigma
pnorm(z)
#
z1 <- (65-mu)/sigma
z2 <- (75-mu)/sigma
#P(65<= X<= 75)=P(X<=75)-P(X<=65)
pnorm(z2)-pnorm(z1)
#
Q3  <- qnorm(0.75, mu, sigma)
Q1  <- qnorm(0.25, mu, sigma)
IQR <- Q3-Q1
IQR
Q
Q1
Q3
#
mu=0
sigma=1
Q3  <- qnorm(0.75, mu, sigma)
Q1  <- qnorm(0.25, mu, sigma)
IQR <- Q3-Q1
IQR
Q1
Q3
sd(dnorm(xx))
xx
dnorm(xx)
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
par(pty = "s", cex = 0.8)
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
qqline(y)
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
qqline(y)
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
qqline(y)
Q1
sd(rnorm(1000,0,1))
Q1  <- qnorm(0.34, mu, sigma)
Q1
Q1  <- qnorm(0.17, mu, sigma)
Q1
Q1  <- qnorm(0.025, mu, sigma)
Q1
x <- seq(-4,4,0.1)
x
qx <- qnorm(x,0,1)
len(x)
length(x)
for (i in length(x)){}
for (i in length(x)){v[i]=qnorm(x[i], 1,0}
for (i in length(x)){       v[i]=qnorm(x[i], 1, 0)   }
x
x <- seq(0,1,0.1)
qx <- qnorm(x,0,1)
qx
x <- seq(0,1,0.01)
qx <- qnorm(x,0,1)
qx
plot(x,qx)
install.packages("tidyverse")
install.packages("tidyverse", dependecies = T)
M <- 10000; n1 <- 20;n2 <- 200;
y1 <- y2 <- rep(NA,M)
y1
y2
mat.ciao <- 2
mat.ciao
iris
library(tree)
library("tree")
install package("tree")
library(rpart, lib.loc = "/usr/lib/R/library")
a~.
rand(5)
rand(5)
random(5)
runif(5)
install.packages("tree")
library(tree)
runif(10)
round(5.6)
shape(iris)
ncol(d)
d.col
d.columns
ncol()
d.ncol
d.ncol()
ncol()
ncol(d)
d
d=iris
ncol(d)
nrow(d)
subset=0.8*round(runif(nrow))
subset=0.8*round(runif(nrow(d)))
subset
subset
subset=0.8*round(runif(nrow(d)))
subset=round(runif(nrow(d)))
subset
subset=round(runif(0.8*nrow))
subset=round(runif(0.8*nrow(d)))
subset
d=iris
set.seed(123)
subset=round(runif(0.8*nrow(d)))
t=tree(formula="Species",d)
t=tree(Species ~.,d)
text.tree
text.tree()
text(tree)
iris()
iris[4]
iris("Species")
iris(Species)
iris
iris
iris=="0"
iris==0
iris(iris==0)
iris[iris==0]
iris[subset1==0]
subset
subset1
subset1=treeround(runif(0.8*nrow(d)))
subset1=round(runif(0.8*nrow(d)))
subset1
iris[subset==1]
iris[subset==0]
iris(subset==0)
Species
iris[1]
iris[0]
iris[5]
iris[1]==5
subset1[1]==5
subset1==1
subset1==1
subset1==1
iris[subset==1]
setwd("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1")
addavg <- function(ss_df){
for (i in 1:13){
ss_df[i,"avg"] <- (ss_df[i,3]+ss_df[i,4]+ss_df[i,5])/3
ss_df[i,"error_bar"] <- (max(ss_df[i,3],ss_df[i,4],ss_df[i,5])-min(ss_df[i,3],ss_df[i,4],ss_df[i,5]))/2
}
ss_df
}
##########################
########################## Strong
ss10to08=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to08.csv", header=TRUE, sep=",")
names(ss10to08)[1]="avg"
ss10to08 <- addavg(ss10to08)
ss10to09=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to09.csv", header=TRUE, sep=",")
names(ss10to09)[1]="avg"
ss10to09 <- addavg(ss10to09)
ss10to10=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to10.csv", header=TRUE, sep=",")
names(ss10to10)[1]="avg"
ss10to10 <- addavg(ss10to10)
ss10to11=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to11.csv", header=TRUE, sep=",")
names(ss10to11)[1]="avg"
ss10to11 <- addavg(ss10to11)
addavg <- function(ss_df){
for (i in 1:13){
ss_df[i,"avg"] <- (ss_df[i,3]+ss_df[i,4]+ss_df[i,5])/3
ss_df[i,"error_bar"] <- (max(ss_df[i,3],ss_df[i,4],ss_df[i,5])-min(ss_df[i,3],ss_df[i,4],ss_df[i,5]))/2
}
ss_df
}
##########################
########################## Strong
ss10to08=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to08.csv", header=TRUE, sep=",")
names(ss10to08)[1]="avg"
ss10to08 <- addavg(ss10to08)
ss10to09=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to09.csv", header=TRUE, sep=",")
names(ss10to09)[1]="avg"
ss10to09 <- addavg(ss10to09)
ss10to10=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to10.csv", header=TRUE, sep=",")
names(ss10to10)[1]="avg"
ss10to10 <- addavg(ss10to10)
ss10to11=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to11.csv", header=TRUE, sep=",")
names(ss10to11)[1]="avg"
ss10to11 <- addavg(ss10to11)
ss10to10
addavg <- function(ss_df){
for (i in 1:13){
ss_df[i,"avg"] <- (ss_df[i,3]+ss_df[i,4]+ss_df[i,5])/3
ss_df[i,"error_bar"] <- (max(ss_df[i,3],ss_df[i,4],ss_df[i,5])-min(ss_df[i,3],ss_df[i,4],ss_df[i,5]))/2
}
ss_df
}
##########################
########################## Strong
ss10to08=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to08.csv", header=TRUE, sep=",")
names(ss10to08)[1]="avg"
ss10to08 <- addavg(ss10to08)
ss10to09=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to09.csv", header=TRUE, sep=",")
names(ss10to09)[1]="avg"
ss10to09 <- addavg(ss10to09)
ss10to10=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to10.csv", header=TRUE, sep=",")
names(ss10to10)[1]="avg"
ss10to10 <- addavg(ss10to10)
ss10to11=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to11.csv", header=TRUE, sep=",")
names(ss10to11)[1]="avg"
ss10to11 <- addavg(ss10to11)
ss10to08
write.csv(ss10to08,'ss10to08.csv')
addavg <- function(ss_df){
for (i in 1:13){
ss_df[i,"avg"] <- (ss_df[i,3]+ss_df[i,4]+ss_df[i,5])/3
ss_df[i,"error_bar"] <- (max(ss_df[i,3],ss_df[i,4],ss_df[i,5])-min(ss_df[i,3],ss_df[i,4],ss_df[i,5]))/2
}
ss_df
}
##########################
########################## Strong
ss10to08=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to08.csv", header=TRUE, sep=",")
names(ss10to08)[1]="avg"
ss10to08 <- addavg(ss10to08)
ss10to09=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to09.csv", header=TRUE, sep=",")
names(ss10to09)[1]="avg"
ss10to09 <- addavg(ss10to09)
ss10to10=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to10.csv", header=TRUE, sep=",")
names(ss10to10)[1]="avg"
ss10to10 <- addavg(ss10to10)
ss10to11=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to11.csv", header=TRUE, sep=",")
names(ss10to11)[1]="avg"
ss10to11 <- addavg(ss10to11)
ss10to08
write.csv(ss10to08,'ss10to08.csv')
addavg <- function(ss_df){
for (i in 1:13){
ss_df[i,"avg"] <- (ss_df[i,3]+ss_df[i,4]+ss_df[i,5])/3
ss_df[i,"error_bar"] <- (max(ss_df[i,3],ss_df[i,4],ss_df[i,5])-min(ss_df[i,3],ss_df[i,4],ss_df[i,5]))/2
}
ss_df
}
##########################
########################## Strong
ss10to08=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to08.csv", header=TRUE, sep=",")
names(ss10to08)[1]="avg"
ss10to08 <- addavg(ss10to08)
ss10to09=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to09.csv", header=TRUE, sep=",")
names(ss10to09)[1]="avg"
ss10to09 <- addavg(ss10to09)
ss10to10=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to10.csv", header=TRUE, sep=",")
names(ss10to10)[1]="avg"
ss10to10 <- addavg(ss10to10)
ss10to11=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/strong-scalability-10to11.csv", header=TRUE, sep=",")
names(ss10to11)[1]="avg"
ss10to11 <- addavg(ss10to11)
addavgws11 <- function(ss_df){
for (i in 1:4){
ss_df[i,"avg"] <- (ss_df[i,3]+ss_df[i,4]+ss_df[i,5])/3
ss_df[i,"error_bar"] <- (max(ss_df[i,3],ss_df[i,4],ss_df[i,5])-min(ss_df[i,3],ss_df[i,4],ss_df[i,5]))/2
}
ss_df
}
##########################
########################## Weak
ws10to08=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/weak-scalability-10to08.csv", header=TRUE, sep=",")
names(ws10to08)[1]="avg"
ws10to08 <- addavg(ws10to08)
ws10to09=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/weak-scalability-10to09.csv", header=TRUE, sep=",")
names(ws10to09)[1]="avg"
ws10to09 <- addavg(ws10to09)
ws10to10=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/weak-scalability-10to10.csv", header=TRUE, sep=",")
names(ws10to10)[1]="avg"
ws10to10 <- addavg(ws10to10)
ws10to11=read.csv("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs/weak-scalability-10to11.csv", header=TRUE, sep=",")
names(ws10to11)[1]="avg"
ws10to11 <- addavgws11(ws10to11)
###########################
write.csv(ss10to08,'ss10to08.csv')
write.csv(ss10to09,'ss10to09.csv')
write.csv(ss10to10,'ss10to10.csv')
write.csv(ss10to11,'ss10to11.csv')
write.csv(ws10to08,'ws10to08.csv')
write.csv(ws10to09,'ws10to09.csv')
write.csv(ws10to10,'ws10to10.csv')
write.csv(ws10to11,'ws10to11.csv')
