pnorm(x)
hist(pnorm(x))
xx <- seq(-4, 4, 0.1)
hist(pnorm(xx))
hist(pnorm(x))
plot(xx, pnorm(x))
plot(xx, pnorm(xx))
u <- runif(30)
u
?runif
?runif(min=0, max=50)
runif(min=0, max=50)
runif(30, min=0, max=50)
?qnorm
#
Q3  <- qnorm(0.75, mu, sigma)
Q1  <- qnorm(0.25, mu, sigma)
IQR <- Q3-Q1
IQR
Q1
mu    <- 70
sigma <- 5
#
pnorm(90, mu, sigma)
#or P(X<=90)=Phi((90-mu)/sigma)
z <- (90-mu)/sigma
pnorm(z)
#
z1 <- (65-mu)/sigma
z2 <- (75-mu)/sigma
#P(65<= X<= 75)=P(X<=75)-P(X<=65)
pnorm(z2)-pnorm(z1)
#
Q3  <- qnorm(0.75, mu, sigma)
Q1  <- qnorm(0.25, mu, sigma)
IQR <- Q3-Q1
IQR
Q
Q1
Q3
#
mu=0
sigma=1
Q3  <- qnorm(0.75, mu, sigma)
Q1  <- qnorm(0.25, mu, sigma)
IQR <- Q3-Q1
IQR
Q1
Q3
sd(dnorm(xx))
xx
dnorm(xx)
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(xx))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(100,0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
2*sd(rnorm(1000,0,1))
par(pty = "s", cex = 0.8)
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
qqline(y)
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
qqline(y)
u <- runif(10^4); y <- qnorm(u, m = 5, s = 2)
par(pty = "s", cex = 0.8)
qqnorm(y, pch = 16, main = "")
qqline(y)
Q1
sd(rnorm(1000,0,1))
Q1  <- qnorm(0.34, mu, sigma)
Q1
Q1  <- qnorm(0.17, mu, sigma)
Q1
Q1  <- qnorm(0.025, mu, sigma)
Q1
x <- seq(-4,4,0.1)
x
qx <- qnorm(x,0,1)
len(x)
length(x)
for (i in length(x)){}
for (i in length(x)){v[i]=qnorm(x[i], 1,0}
for (i in length(x)){       v[i]=qnorm(x[i], 1, 0)   }
x
x <- seq(0,1,0.1)
qx <- qnorm(x,0,1)
qx
x <- seq(0,1,0.01)
qx <- qnorm(x,0,1)
qx
plot(x,qx)
install.packages("tidyverse")
install.packages("tidyverse", dependecies = T)
M <- 10000; n1 <- 20;n2 <- 200;
y1 <- y2 <- rep(NA,M)
y1
y2
mat.ciao <- 2
mat.ciao
iris
library(tree)
library("tree")
install package("tree")
library(rpart, lib.loc = "/usr/lib/R/library")
a~.
rand(5)
rand(5)
random(5)
runif(5)
install.packages("tree")
library(tree)
runif(10)
round(5.6)
shape(iris)
ncol(d)
d.col
d.columns
ncol()
d.ncol
d.ncol()
ncol()
ncol(d)
d
d=iris
ncol(d)
nrow(d)
subset=0.8*round(runif(nrow))
subset=0.8*round(runif(nrow(d)))
subset
subset
subset=0.8*round(runif(nrow(d)))
subset=round(runif(nrow(d)))
subset
subset=round(runif(0.8*nrow))
subset=round(runif(0.8*nrow(d)))
subset
d=iris
set.seed(123)
subset=round(runif(0.8*nrow(d)))
t=tree(formula="Species",d)
t=tree(Species ~.,d)
text.tree
text.tree()
text(tree)
iris()
iris[4]
iris("Species")
iris(Species)
iris
iris
iris=="0"
iris==0
iris(iris==0)
iris[iris==0]
iris[subset1==0]
subset
subset1
subset1=treeround(runif(0.8*nrow(d)))
subset1=round(runif(0.8*nrow(d)))
subset1
iris[subset==1]
iris[subset==0]
iris(subset==0)
Species
iris[1]
iris[0]
iris[5]
iris[1]==5
subset1[1]==5
subset1==1
subset1==1
subset1==1
iris[subset==1]
a <- rep(5,20)
a
y <- rep(2,10)
y
y[-1]
y <- c(1,2,3,4,5,6,7)
y_i <- y[-4]
y_i
y <- c(1, 4, 6, 12, 13, 14, 18, 19, 20, 22, 23, 24, 26, 31, 34,
37, 46, 47, 56, 61, 63, 65, 70, 97, 385)
n <- length(y); set.seed(1989); B <- 10^4
boot.sample <- matrix(NA, nrow = B, ncol = n)
boot.sample[1,] <- sample(y, n, replace = TRUE)
boot.sample[1,]
y
?sample
length(y)
length(boot.sample)
nrow(boot.sample)
ncol(boot.sample)
sample(y,n,replace=TRUE)
sample(y,n,replace=TRUE)
sample(y,n,replace=TRUE)
sample(y,n,replace=TRUE)
z_sim <- numeric(5)
z_sim
y <- rep(0:5,2)
y
y <- rep(10,2)
y
iris
iris$Species
?plogis
iris
rf <- randomForest
rf <- randomForest(iris$Species ~ ., iris)
install.packages("randomForest")
library(randomForest)
rf <- randomForest(iris$Species ~ ., iris)
rf
rf <- randomForest(iris$Species ~ ., iris).importance
rf.importance
rf.importance
rf.importance()
rf.importance()
rf <- randomForest(iris$Species ~ ., iris)
rf.importance()
rf.importance
rf$importance
rf
rf$class
rf$type
rf$importance
iris[1:3]
myiris <- sample(iris ~)
sample(iris)
sample(1:150)
myiris <- iris$Species[iris$Species==virginica]
iris$Species[iris$Species==virginica]
iris$Species==virginica
iris$Species=
kj
iris$Species
iris$Species.levels
iris$Species=factor(iris$Species)
iris
factor(iris$Species)
mydata <- iris[iris$Species=="virginica"|iris$Species=="versicolor",]
mydata
mydata <- iris[iris$Species=="virginica"|iris$Species=="versicolor",]
mydata <- factor(mydata$Species)
mydata
mydata <- iris[iris$Species=="virginica"|iris$Species=="versicolor",]
mydata
factor(mydata)
level(mydata)
level.mydata
mydata
mydata.levels
mydata.factors
levels(factor())
levels(factor
levels(factor
levels(factor)
levels(mydata)
levels(mydata$Species)
factor(mydata$Species)
mydata <- iris[iris$Species=="virginica"|iris$Species=="versicolor",]
factor(mydata$Species)
factor(iris$Species)
rf <- randomForest(mydata$Species ~ ., mydata)
mydata <- droplevels(mydata)
mydata
rf <- randomForest(mydata$Species ~ ., mydata)
rf$importance
rf
iris$Species[-"virginica"]
iris$Species[.-"virginica"]
mydata[mydata$Petal.Length]
iris[1,]
iris[1,4]
iris[1:3,4]
iris[,4]
mydata[mydata$Species]
mydata[-mydata$Species]
mydata[,~mydata$Species]
mydata[-mydata$Petal.Length]
mydata
mydata[-mydata$Petal.Length]
mydata[.-mydata$Petal.Length]
subset(mydata, select = -iris$Petal.Length )
subset(mydata, select = iris$Petal.Length )
subset(mydata, select = -iris$Petal.Length )
subset(mydata, select = -mydata$Petal.Length )
subset(mydata )
subset(mydata, select = -(mydata$Petal.Length) )
subset(mydata, select = -c(mydata$Petal.Length) )
subset(mydata, select = -c(mydata$Petal.Length, mydata$Petal.Width) )
subset(mydata, select = -c(Petal.Length) )
without_PL <- subset(mydata, select = -c(Petal.Length) )
rf_without <- randomForest(without_PL$Species ~ ., without_PL)
rf_without
rf.without$importance
rf_without$importance
rf$ntree
rf <- randomForest(mydata$Species ~ ., mydata, ntree=100)
rf
1:5
1:5:2
B_seq <- seq(10,500,10)
B_seq
rf
rf$err.rate
rf
rf_without
rf$importance
without_PL$importance
rf_without$importance
rf
rf$err.rate
rf$test
rf
mean(rf$err.rate)
a <- seq(10)
a
a <- seq(10,0)
a
seq(10,500,10)*0
numeric(5)
B_seq <- seq(10,500,10)
length(B)
length(B_seq)
plot(B_seq, err)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
B_seq <- seq(10,500,10)
err <- numeric(length(B_seq))
for (j in B_seq){
rf <- randomForest(mydata$Species ~ ., mydata, ntree=j)
err[j] <- mean(rf$err_rate)
}
plot(B_seq, err)
err
B_seq
err
length(B_seq)
rf <- randomForest(mydata$Species ~ ., mydata, ntree=100)
rf
rf$err.rate
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
err_rate
err
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
rf$call
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
?plot
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
source('~/Scrivania/File_Davide/UNITS/IntroML/rf.R', echo=TRUE)
setwd("~/Scrivania/File_Davide/UNITS/HPC/my_git/assignment1/docs")
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
# serial algo
SerialTime <- function(N,P,T_comp,T_read,T_comm){
T_s <- T_read+N*T_comp
}
# naive parallel algo
NaiveTime <- function(N,P,T_comp,T_read,T_comm){
T_P <- T_comp*(P-1+N/P)+T_read+2*(P-1)*T_comm
}
# enhanced parallel algo
EnhancedTime <- function(N,P,T_comp,T_read,T_comm){
T_P <- 2*T_comm*(ceiling(log2(P)))+T_read+(N/P+ceiling(log2(P)))*T_comp
}
# fixed params
T_comp <- 2*1e-09
T_read <- 1e-04
T_comm <- 1e-06
t_n <- vector(length=100)
P_seq <- seq(1:100)
N_vect <- c(1e04,1e05,1e06,1e07)
t_serial <- matrix(nrow=length(N_vect),ncol=length(P_seq))
t_naive <- matrix(nrow=length(N_vect),ncol=length(P_seq))
t_enhanced <- matrix(nrow=length(N_vect),ncol=length(P_seq))
count <- 1
# N fixed; P on xaxis; scalability on yaxis
for (N in N_vect){
for (P in P_seq){
t_serial[count,P] <- SerialTime(N,P,T_comp,T_read,T_comm)
t_naive[count,P] <- NaiveTime(N,P,T_comp,T_read,T_comm)
t_enhanced[count,P] <- EnhancedTime(N,P,T_comp,T_read,T_comm)
}
count <- count+1
}
# plot comparison: Total Time
for (k in 1:length(N_vect)){
plot(P_seq,t_naive[k,], xlab="P cores", log="y", sub="log scale on time", ylab="time", main=paste("Total Time with N =",  N_vect[k], sep=" "), type="p", col="red", ylim=c(min(t_naive[k,], t_enhanced[k,], t_serial[k,]), max(t_naive[k,], t_enhanced[k,], t_serial[k,])))
points(P_seq,t_enhanced[k,], col="blue")
points(P_seq, t_serial[k,], col="green")
legend("topleft", c("naive algo","enhanced algo", "serial algo"), cex=0.8, pch=1, col=c("red", "blue", "green"))
}
# serial algo
SerialTime <- function(N,P,T_comp,T_read,T_comm){
T_s <- T_read+N*T_comp
}
# naive parallel algo
NaiveTime <- function(N,P,T_comp,T_read,T_comm){
T_P <- T_comp*(P-1+N/P)+T_read+2*(P-1)*T_comm
}
# enhanced parallel algo
EnhancedTime <- function(N,P,T_comp,T_read,T_comm){
T_P <- 2*T_comm*(ceiling(log2(P)))+T_read+(N/P+ceiling(log2(P)))*T_comp
}
# fixed params
T_comp <- 2*1e-09
T_read <- 1e-04
T_comm <- 1e-06
t_n <- vector(length=100)
P_seq <- seq(1:100)
N_vect <- c(1e04,1e05,1e06,1e07)
t_serial <- matrix(nrow=length(N_vect),ncol=length(P_seq))
t_naive <- matrix(nrow=length(N_vect),ncol=length(P_seq))
t_enhanced <- matrix(nrow=length(N_vect),ncol=length(P_seq))
count <- 1
# N fixed; P on xaxis; scalability on yaxis
for (N in N_vect){
for (P in P_seq){
t_serial[count,P] <- SerialTime(N,P,T_comp,T_read,T_comm)
t_naive[count,P] <- NaiveTime(N,P,T_comp,T_read,T_comm)
t_enhanced[count,P] <- EnhancedTime(N,P,T_comp,T_read,T_comm)
}
count <- count+1
}
# plot comparison: Total Time
for (k in 1:length(N_vect)){
plot(P_seq,t_naive[k,], xlab="P cores", log="y", sub="log scale on time", ylab="time", main=paste("Total Time with N =",  N_vect[k], sep=" "), type="p", col="red", ylim=c(min(t_naive[k,], t_enhanced[k,], t_serial[k,]), max(t_naive[k,], t_enhanced[k,], t_serial[k,])))
points(P_seq,t_enhanced[k,], col="blue")
points(P_seq, t_serial[k,], col="green")
legend("topleft", c("naive algo","enhanced algo", "serial algo"), cex=0.8, pch=1, col=c("red", "blue", "green"))
}
# serial algo
SerialTime <- function(N,P,T_comp,T_read,T_comm){
T_s <- T_read+N*T_comp
}
# naive parallel algo
NaiveTime <- function(N,P,T_comp,T_read,T_comm){
T_P <- T_comp*(P-1+N/P)+T_read+2*(P-1)*T_comm
}
# enhanced parallel algo
EnhancedTime <- function(N,P,T_comp,T_read,T_comm){
T_P <- 2*T_comm*(ceiling(log2(P)))+T_read+(N/P+ceiling(log2(P)))*T_comp
}
# fixed params
T_comp <- 2*1e-09
T_read <- 1e-04
T_comm <- 1e-06
t_n <- vector(length=100)
P_seq <- seq(1:100)
N_vect <- c(1e04,1e05,1e06,1e07)
t_serial <- matrix(nrow=length(N_vect),ncol=length(P_seq))
t_naive <- matrix(nrow=length(N_vect),ncol=length(P_seq))
t_enhanced <- matrix(nrow=length(N_vect),ncol=length(P_seq))
count <- 1
# N fixed; P on xaxis; scalability on yaxis
for (N in N_vect){
for (P in P_seq){
t_serial[count,P] <- SerialTime(N,P,T_comp,T_read,T_comm)
t_naive[count,P] <- NaiveTime(N,P,T_comp,T_read,T_comm)
t_enhanced[count,P] <- EnhancedTime(N,P,T_comp,T_read,T_comm)
}
count <- count+1
}
# plot comparison: Total Time
for (k in 1:length(N_vect)){
plot(P_seq,t_naive[k,], xlab="P cores", log="y", sub="log scale on time", ylab="time", main=paste("Total Time with N =",  N_vect[k], sep=" "), type="p", col="red", ylim=c(min(t_naive[k,], t_enhanced[k,], t_serial[k,]), max(t_naive[k,], t_enhanced[k,], t_serial[k,])))
points(P_seq,t_enhanced[k,], col="blue")
points(P_seq, t_serial[k,], col="green")
legend("topleft", c("naive algo","enhanced algo", "serial algo"), cex=0.8, pch=1, col=c("red", "blue", "green"))
}
