plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="time (sec)", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
knitr::opts_chunk$set(echo = TRUE)
########### reading scalabillity data ##################
ss_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_mpi.csv", header=TRUE, sep=",")
names(ss_mpi)[1]="P"
ss_mpi_k11=ss_mpi[ss_mpi$kernel_dim==11,]
ss_mpi_k101=ss_mpi[ss_mpi$kernel_dim==101,]
ss_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ss_omp.csv", header=TRUE, sep=",")
names(ss_omp)[1]="P"
ss_omp_k11=ss_omp[ss_omp$kernel_dim==11,]
ss_omp_k101=ss_omp[ss_omp$kernel_dim==101,]
ww_mpi=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_mpi.csv", header=TRUE, sep=",")
names(ww_mpi)[1]="P"
ww_mpi_k11=ww_mpi[ww_mpi$kernel_dim==11,]
ww_mpi_k101=ww_mpi[ww_mpi$kernel_dim==101,]
ww_omp=read.csv("~/Scrivania/File_Davide/UNITS/HPC/mynewgit/assignment2/myscal_results/ww_omp.csv", header=TRUE, sep=",")
names(ww_omp)[1]="P"
ww_omp_k11=ww_omp[ww_omp$kernel_dim==11,]
ww_omp_k101=ww_omp[ww_omp$kernel_dim==101,]
########### finish reading scalability data ################
##### start avg for kernel=11
iter_vec_ssmpi11=ss_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k11$avg=rowMeans(iter_vec_ssmpi11)  # vector of average among repetitions
iter_vec_ssomp11=ss_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k11$avg=rowMeans(iter_vec_ssomp11)  # vector of average among repetitions
iter_vec_wwmpi11=ww_mpi_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k11$avg=rowMeans(iter_vec_wwmpi11)  # vector of average among repetitions
iter_vec_wwomp11=ww_omp_k11[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k11$avg=rowMeans(iter_vec_wwomp11)  # vector of average among repetitions
########## end of kernel=11
######### avg for kernel=101
iter_vec_ssmpi101=ss_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_mpi_k101$avg=rowMeans(iter_vec_ssmpi101)  # vector of average among repetitions
iter_vec_ssomp101=ss_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ss_omp_k101$avg=rowMeans(iter_vec_ssomp101)  # vector of average among repetitions
iter_vec_wwmpi101=ww_mpi_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_mpi_k101$avg=rowMeans(iter_vec_wwmpi101)  # vector of average among repetitions
iter_vec_wwomp101=ww_omp_k101[,c("iter1", "iter2", "iter3")]  # three vectors with repetitions
ww_omp_k101$avg=rowMeans(iter_vec_wwomp101)  # vector of average among repetitions
########## end of kernel=101
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_mpi_k11$P, scalab(ss_mpi_k11$avg), main="mpi - strong - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_mpi_k101$P, scalab(ss_mpi_k101$avg), main="mpi - strong - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_mpi_k11$P, weakeff(ww_mpi_k11$avg), main="mpi - weak - kernel=11", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_mpi_k101$P, weakeff(ww_mpi_k101$avg), main="mpi - weak - kernel=101", col="blue", xlab="P", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for mpi ############
# scalability function: input the time vector for n procs
scalab <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
# weak eff: input the time vector for n procs
weakeff <- function(t_P){
S <- ((1+numeric(length(t_P)))*t_P[1])/t_P
}
############# start of plotting scalab for mpi ############
mat <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
layout(mat, c(1,1,1,1), c(1,1,1,1))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="omp - strong - kernel=11", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,24))
plot(ss_omp_k101$P, scalab(ss_omp_k101$avg), main="omp - strong - kernel=101", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,24))
plot(ww_omp_k11$P, weakeff(ww_omp_k11$avg), main="omp - weak - kernel=11", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,1))
plot(ww_omp_k101$P, weakeff(ww_omp_k101$avg), main="omp - weak - kernel=101", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,1))
############ end of plotting sclab for omp ############
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="strong", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,24))
+points(ss_omp_k11$P, scalab(ss_mpi_k11$avg))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="strong", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,24))
points(ss_omp_k11$P, scalab(ss_mpi_k11$avg))
points(ss_omp_k11$P, scalab(ss_omp_k101$avg))
points(ss_omp_k11$P, scalab(ss_mpi_k101$avg))
legend("topleft", c("omp", "mpi", "omp", "mpi"), cex=0.8, pch=1, col=c("red", "blue", "green"))
plot(ss_omp_k11$P, scalab(ss_omp_k11$avg), main="strong", col="blue", xlab="threads", ylab="scalability", type="o", ylim=c(0,24))
points(ss_omp_k11$P, scalab(ss_mpi_k11$avg), col="green", type='o')
points(ss_omp_k11$P, scalab(ss_omp_k101$avg), col="red", type='o')
points(ss_omp_k11$P, scalab(ss_mpi_k101$avg), col="yellow", ,type="o")
legend("topleft", c("omp", "mpi", "omp", "mpi"), cex=0.8, pch=1, col=c("red", "blue", "green"))
